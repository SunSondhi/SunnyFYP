# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Message.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Message
_M_Message = Ice.openModule('Message')
__name__ = 'Message'

if 'TwistData' not in _M_Message.__dict__:
    _M_Message.TwistData = Ice.createTempClass()
    class TwistData(object):
        def __init__(self, linearx=0.0, lineary=0.0, linearz=0.0, angularx=0.0, angulary=0.0, angularz=0.0):
            self.linearx = linearx
            self.lineary = lineary
            self.linearz = linearz
            self.angularx = angularx
            self.angulary = angulary
            self.angularz = angularz

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Message.TwistData):
                return NotImplemented
            else:
                if self.linearx != other.linearx:
                    return False
                if self.lineary != other.lineary:
                    return False
                if self.linearz != other.linearz:
                    return False
                if self.angularx != other.angularx:
                    return False
                if self.angulary != other.angulary:
                    return False
                if self.angularz != other.angularz:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Message._t_TwistData)

        __repr__ = __str__

    _M_Message._t_TwistData = IcePy.defineStruct('::Message::TwistData', TwistData, (), (
        ('linearx', (), IcePy._t_double),
        ('lineary', (), IcePy._t_double),
        ('linearz', (), IcePy._t_double),
        ('angularx', (), IcePy._t_double),
        ('angulary', (), IcePy._t_double),
        ('angularz', (), IcePy._t_double)
    ))

    _M_Message.TwistData = TwistData
    del TwistData

_M_Message._t_MessageSender = IcePy.defineValue('::Message::MessageSender', Ice.Value, -1, (), False, True, None, ())

if 'MessageSenderPrx' not in _M_Message.__dict__:
    _M_Message.MessageSenderPrx = Ice.createTempClass()
    class MessageSenderPrx(Ice.ObjectPrx):

        def sendMessage(self, data, context=None):
            return _M_Message.MessageSender._op_sendMessage.invoke(self, ((data, ), context))

        def sendMessageAsync(self, data, context=None):
            return _M_Message.MessageSender._op_sendMessage.invokeAsync(self, ((data, ), context))

        def begin_sendMessage(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_Message.MessageSender._op_sendMessage.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_sendMessage(self, _r):
            return _M_Message.MessageSender._op_sendMessage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Message.MessageSenderPrx.ice_checkedCast(proxy, '::Message::MessageSender', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Message.MessageSenderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Message::MessageSender'
    _M_Message._t_MessageSenderPrx = IcePy.defineProxy('::Message::MessageSender', MessageSenderPrx)

    _M_Message.MessageSenderPrx = MessageSenderPrx
    del MessageSenderPrx

    _M_Message.MessageSender = Ice.createTempClass()
    class MessageSender(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Message::MessageSender')

        def ice_id(self, current=None):
            return '::Message::MessageSender'

        @staticmethod
        def ice_staticId():
            return '::Message::MessageSender'

        def sendMessage(self, data, current=None):
            raise NotImplementedError("servant method 'sendMessage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Message._t_MessageSenderDisp)

        __repr__ = __str__

    _M_Message._t_MessageSenderDisp = IcePy.defineClass('::Message::MessageSender', MessageSender, (), None, ())
    MessageSender._ice_type = _M_Message._t_MessageSenderDisp

    MessageSender._op_sendMessage = IcePy.Operation('sendMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Message._t_TwistData, False, 0),), (), None, ())

    _M_Message.MessageSender = MessageSender
    del MessageSender

# End of module Message
