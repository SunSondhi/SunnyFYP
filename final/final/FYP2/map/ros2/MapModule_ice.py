# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `MapModule.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MapModule
_M_MapModule = Ice.openModule('MapModule')
__name__ = 'MapModule'

if 'Time' not in _M_MapModule.__dict__:
    _M_MapModule.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, secs=0, nsecs=0):
            self.secs = secs
            self.nsecs = nsecs

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.secs)
            _h = 5 * _h + Ice.getHash(self.nsecs)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MapModule.Time):
                return NotImplemented
            else:
                if self.secs is None or other.secs is None:
                    if self.secs != other.secs:
                        return (-1 if self.secs is None else 1)
                else:
                    if self.secs < other.secs:
                        return -1
                    elif self.secs > other.secs:
                        return 1
                if self.nsecs is None or other.nsecs is None:
                    if self.nsecs != other.nsecs:
                        return (-1 if self.nsecs is None else 1)
                else:
                    if self.nsecs < other.nsecs:
                        return -1
                    elif self.nsecs > other.nsecs:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_Time)

        __repr__ = __str__

    _M_MapModule._t_Time = IcePy.defineStruct('::MapModule::Time', Time, (), (
        ('secs', (), IcePy._t_long),
        ('nsecs', (), IcePy._t_long)
    ))

    _M_MapModule.Time = Time
    del Time

if 'Pose' not in _M_MapModule.__dict__:
    _M_MapModule.Pose = Ice.createTempClass()
    class Pose(object):
        def __init__(self, positionx=0.0, positiony=0.0, positionz=0.0, orientationx=0.0, orientationy=0.0, orientationz=0.0, orientationw=0.0):
            self.positionx = positionx
            self.positiony = positiony
            self.positionz = positionz
            self.orientationx = orientationx
            self.orientationy = orientationy
            self.orientationz = orientationz
            self.orientationw = orientationw

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_MapModule.Pose):
                return NotImplemented
            else:
                if self.positionx != other.positionx:
                    return False
                if self.positiony != other.positiony:
                    return False
                if self.positionz != other.positionz:
                    return False
                if self.orientationx != other.orientationx:
                    return False
                if self.orientationy != other.orientationy:
                    return False
                if self.orientationz != other.orientationz:
                    return False
                if self.orientationw != other.orientationw:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_Pose)

        __repr__ = __str__

    _M_MapModule._t_Pose = IcePy.defineStruct('::MapModule::Pose', Pose, (), (
        ('positionx', (), IcePy._t_double),
        ('positiony', (), IcePy._t_double),
        ('positionz', (), IcePy._t_double),
        ('orientationx', (), IcePy._t_double),
        ('orientationy', (), IcePy._t_double),
        ('orientationz', (), IcePy._t_double),
        ('orientationw', (), IcePy._t_double)
    ))

    _M_MapModule.Pose = Pose
    del Pose

if 'Header' not in _M_MapModule.__dict__:
    _M_MapModule.Header = Ice.createTempClass()
    class Header(object):
        def __init__(self, seq=0, stamp=Ice._struct_marker, frameid=''):
            self.seq = seq
            if stamp is Ice._struct_marker:
                self.stamp = _M_MapModule.Time()
            else:
                self.stamp = stamp
            self.frameid = frameid

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seq)
            _h = 5 * _h + Ice.getHash(self.stamp)
            _h = 5 * _h + Ice.getHash(self.frameid)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MapModule.Header):
                return NotImplemented
            else:
                if self.seq is None or other.seq is None:
                    if self.seq != other.seq:
                        return (-1 if self.seq is None else 1)
                else:
                    if self.seq < other.seq:
                        return -1
                    elif self.seq > other.seq:
                        return 1
                if self.stamp is None or other.stamp is None:
                    if self.stamp != other.stamp:
                        return (-1 if self.stamp is None else 1)
                else:
                    if self.stamp < other.stamp:
                        return -1
                    elif self.stamp > other.stamp:
                        return 1
                if self.frameid is None or other.frameid is None:
                    if self.frameid != other.frameid:
                        return (-1 if self.frameid is None else 1)
                else:
                    if self.frameid < other.frameid:
                        return -1
                    elif self.frameid > other.frameid:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_Header)

        __repr__ = __str__

    _M_MapModule._t_Header = IcePy.defineStruct('::MapModule::Header', Header, (), (
        ('seq', (), IcePy._t_long),
        ('stamp', (), _M_MapModule._t_Time),
        ('frameid', (), IcePy._t_string)
    ))

    _M_MapModule.Header = Header
    del Header

if 'MapMetaData' not in _M_MapModule.__dict__:
    _M_MapModule.MapMetaData = Ice.createTempClass()
    class MapMetaData(object):
        def __init__(self, maploadtime=Ice._struct_marker, resolution=0.0, width=0, height=0, origin=Ice._struct_marker):
            if maploadtime is Ice._struct_marker:
                self.maploadtime = _M_MapModule.Time()
            else:
                self.maploadtime = maploadtime
            self.resolution = resolution
            self.width = width
            self.height = height
            if origin is Ice._struct_marker:
                self.origin = _M_MapModule.Pose()
            else:
                self.origin = origin

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_MapModule.MapMetaData):
                return NotImplemented
            else:
                if self.maploadtime != other.maploadtime:
                    return False
                if self.resolution != other.resolution:
                    return False
                if self.width != other.width:
                    return False
                if self.height != other.height:
                    return False
                if self.origin != other.origin:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_MapMetaData)

        __repr__ = __str__

    _M_MapModule._t_MapMetaData = IcePy.defineStruct('::MapModule::MapMetaData', MapMetaData, (), (
        ('maploadtime', (), _M_MapModule._t_Time),
        ('resolution', (), IcePy._t_double),
        ('width', (), IcePy._t_long),
        ('height', (), IcePy._t_long),
        ('origin', (), _M_MapModule._t_Pose)
    ))

    _M_MapModule.MapMetaData = MapMetaData
    del MapMetaData

if '_t_data' not in _M_MapModule.__dict__:
    _M_MapModule._t_data = IcePy.defineSequence('::MapModule::data', (), IcePy._t_long)

if 'OccupancyGridData' not in _M_MapModule.__dict__:
    _M_MapModule.OccupancyGridData = Ice.createTempClass()
    class OccupancyGridData(object):
        def __init__(self, seqnum=0, data=None):
            self.seqnum = seqnum
            self.data = data

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seqnum)
            if self.data:
                for _i0 in self.data:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MapModule.OccupancyGridData):
                return NotImplemented
            else:
                if self.seqnum is None or other.seqnum is None:
                    if self.seqnum != other.seqnum:
                        return (-1 if self.seqnum is None else 1)
                else:
                    if self.seqnum < other.seqnum:
                        return -1
                    elif self.seqnum > other.seqnum:
                        return 1
                if self.data is None or other.data is None:
                    if self.data != other.data:
                        return (-1 if self.data is None else 1)
                else:
                    if self.data < other.data:
                        return -1
                    elif self.data > other.data:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_OccupancyGridData)

        __repr__ = __str__

    _M_MapModule._t_OccupancyGridData = IcePy.defineStruct('::MapModule::OccupancyGridData', OccupancyGridData, (), (
        ('seqnum', (), IcePy._t_long),
        ('data', (), _M_MapModule._t_data)
    ))

    _M_MapModule.OccupancyGridData = OccupancyGridData
    del OccupancyGridData

if 'MapInfo' not in _M_MapModule.__dict__:
    _M_MapModule.MapInfo = Ice.createTempClass()
    class MapInfo(object):
        def __init__(self, header=Ice._struct_marker, timestamp=Ice._struct_marker, metadata=Ice._struct_marker, griddata=Ice._struct_marker):
            if header is Ice._struct_marker:
                self.header = _M_MapModule.Header()
            else:
                self.header = header
            if timestamp is Ice._struct_marker:
                self.timestamp = _M_MapModule.Time()
            else:
                self.timestamp = timestamp
            if metadata is Ice._struct_marker:
                self.metadata = _M_MapModule.MapMetaData()
            else:
                self.metadata = metadata
            if griddata is Ice._struct_marker:
                self.griddata = _M_MapModule.OccupancyGridData()
            else:
                self.griddata = griddata

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_MapModule.MapInfo):
                return NotImplemented
            else:
                if self.header != other.header:
                    return False
                if self.timestamp != other.timestamp:
                    return False
                if self.metadata != other.metadata:
                    return False
                if self.griddata != other.griddata:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_MapInfo)

        __repr__ = __str__

    _M_MapModule._t_MapInfo = IcePy.defineStruct('::MapModule::MapInfo', MapInfo, (), (
        ('header', (), _M_MapModule._t_Header),
        ('timestamp', (), _M_MapModule._t_Time),
        ('metadata', (), _M_MapModule._t_MapMetaData),
        ('griddata', (), _M_MapModule._t_OccupancyGridData)
    ))

    _M_MapModule.MapInfo = MapInfo
    del MapInfo

_M_MapModule._t_MapData = IcePy.defineValue('::MapModule::MapData', Ice.Value, -1, (), False, True, None, ())

if 'MapDataPrx' not in _M_MapModule.__dict__:
    _M_MapModule.MapDataPrx = Ice.createTempClass()
    class MapDataPrx(Ice.ObjectPrx):

        def getLatestMapData(self, context=None):
            return _M_MapModule.MapData._op_getLatestMapData.invoke(self, ((), context))

        def getLatestMapDataAsync(self, context=None):
            return _M_MapModule.MapData._op_getLatestMapData.invokeAsync(self, ((), context))

        def begin_getLatestMapData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MapModule.MapData._op_getLatestMapData.begin(self, ((), _response, _ex, _sent, context))

        def end_getLatestMapData(self, _r):
            return _M_MapModule.MapData._op_getLatestMapData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MapModule.MapDataPrx.ice_checkedCast(proxy, '::MapModule::MapData', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MapModule.MapDataPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MapModule::MapData'
    _M_MapModule._t_MapDataPrx = IcePy.defineProxy('::MapModule::MapData', MapDataPrx)

    _M_MapModule.MapDataPrx = MapDataPrx
    del MapDataPrx

    _M_MapModule.MapData = Ice.createTempClass()
    class MapData(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MapModule::MapData')

        def ice_id(self, current=None):
            return '::MapModule::MapData'

        @staticmethod
        def ice_staticId():
            return '::MapModule::MapData'

        def getLatestMapData(self, current=None):
            raise NotImplementedError("servant method 'getLatestMapData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MapModule._t_MapDataDisp)

        __repr__ = __str__

    _M_MapModule._t_MapDataDisp = IcePy.defineClass('::MapModule::MapData', MapData, (), None, ())
    MapData._ice_type = _M_MapModule._t_MapDataDisp

    MapData._op_getLatestMapData = IcePy.Operation('getLatestMapData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_MapModule._t_MapInfo, False, 0), ())

    _M_MapModule.MapData = MapData
    del MapData

# End of module MapModule
