# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `TFModule.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module TFModule
_M_TFModule = Ice.openModule('TFModule')
__name__ = 'TFModule'

if 'Vector3' not in _M_TFModule.__dict__:
    _M_TFModule.Vector3 = Ice.createTempClass()
    class Vector3(object):
        def __init__(self, x=0.0, y=0.0, z=0.0):
            self.x = x
            self.y = y
            self.z = z

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_TFModule.Vector3):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_Vector3)

        __repr__ = __str__

    _M_TFModule._t_Vector3 = IcePy.defineStruct('::TFModule::Vector3', Vector3, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float)
    ))

    _M_TFModule.Vector3 = Vector3
    del Vector3

if 'Quaternion' not in _M_TFModule.__dict__:
    _M_TFModule.Quaternion = Ice.createTempClass()
    class Quaternion(object):
        def __init__(self, x=0.0, y=0.0, z=0.0, w=0.0):
            self.x = x
            self.y = y
            self.z = z
            self.w = w

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_TFModule.Quaternion):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                if self.w != other.w:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_Quaternion)

        __repr__ = __str__

    _M_TFModule._t_Quaternion = IcePy.defineStruct('::TFModule::Quaternion', Quaternion, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float),
        ('w', (), IcePy._t_float)
    ))

    _M_TFModule.Quaternion = Quaternion
    del Quaternion

if 'TimeStamp' not in _M_TFModule.__dict__:
    _M_TFModule.TimeStamp = Ice.createTempClass()
    class TimeStamp(object):
        def __init__(self, sec=0, nanosec=0):
            self.sec = sec
            self.nanosec = nanosec

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.sec)
            _h = 5 * _h + Ice.getHash(self.nanosec)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TFModule.TimeStamp):
                return NotImplemented
            else:
                if self.sec is None or other.sec is None:
                    if self.sec != other.sec:
                        return (-1 if self.sec is None else 1)
                else:
                    if self.sec < other.sec:
                        return -1
                    elif self.sec > other.sec:
                        return 1
                if self.nanosec is None or other.nanosec is None:
                    if self.nanosec != other.nanosec:
                        return (-1 if self.nanosec is None else 1)
                else:
                    if self.nanosec < other.nanosec:
                        return -1
                    elif self.nanosec > other.nanosec:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_TimeStamp)

        __repr__ = __str__

    _M_TFModule._t_TimeStamp = IcePy.defineStruct('::TFModule::TimeStamp', TimeStamp, (), (
        ('sec', (), IcePy._t_long),
        ('nanosec', (), IcePy._t_long)
    ))

    _M_TFModule.TimeStamp = TimeStamp
    del TimeStamp

if 'TFDataStruct' not in _M_TFModule.__dict__:
    _M_TFModule.TFDataStruct = Ice.createTempClass()
    class TFDataStruct(object):
        def __init__(self, header=Ice._struct_marker, frameid='', childframeid='', translation=Ice._struct_marker, rotation=Ice._struct_marker, timestamp=Ice._struct_marker):
            if header is Ice._struct_marker:
                self.header = _M_TFModule.TimeStamp()
            else:
                self.header = header
            self.frameid = frameid
            self.childframeid = childframeid
            if translation is Ice._struct_marker:
                self.translation = _M_TFModule.Vector3()
            else:
                self.translation = translation
            if rotation is Ice._struct_marker:
                self.rotation = _M_TFModule.Quaternion()
            else:
                self.rotation = rotation
            if timestamp is Ice._struct_marker:
                self.timestamp = _M_TFModule.TimeStamp()
            else:
                self.timestamp = timestamp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_TFModule.TFDataStruct):
                return NotImplemented
            else:
                if self.header != other.header:
                    return False
                if self.frameid != other.frameid:
                    return False
                if self.childframeid != other.childframeid:
                    return False
                if self.translation != other.translation:
                    return False
                if self.rotation != other.rotation:
                    return False
                if self.timestamp != other.timestamp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_TFDataStruct)

        __repr__ = __str__

    _M_TFModule._t_TFDataStruct = IcePy.defineStruct('::TFModule::TFDataStruct', TFDataStruct, (), (
        ('header', (), _M_TFModule._t_TimeStamp),
        ('frameid', (), IcePy._t_string),
        ('childframeid', (), IcePy._t_string),
        ('translation', (), _M_TFModule._t_Vector3),
        ('rotation', (), _M_TFModule._t_Quaternion),
        ('timestamp', (), _M_TFModule._t_TimeStamp)
    ))

    _M_TFModule.TFDataStruct = TFDataStruct
    del TFDataStruct

_M_TFModule._t_TFData = IcePy.defineValue('::TFModule::TFData', Ice.Value, -1, (), False, True, None, ())

if 'TFDataPrx' not in _M_TFModule.__dict__:
    _M_TFModule.TFDataPrx = Ice.createTempClass()
    class TFDataPrx(Ice.ObjectPrx):

        def getTFData(self, context=None):
            return _M_TFModule.TFData._op_getTFData.invoke(self, ((), context))

        def getTFDataAsync(self, context=None):
            return _M_TFModule.TFData._op_getTFData.invokeAsync(self, ((), context))

        def begin_getTFData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_TFModule.TFData._op_getTFData.begin(self, ((), _response, _ex, _sent, context))

        def end_getTFData(self, _r):
            return _M_TFModule.TFData._op_getTFData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TFModule.TFDataPrx.ice_checkedCast(proxy, '::TFModule::TFData', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TFModule.TFDataPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TFModule::TFData'
    _M_TFModule._t_TFDataPrx = IcePy.defineProxy('::TFModule::TFData', TFDataPrx)

    _M_TFModule.TFDataPrx = TFDataPrx
    del TFDataPrx

    _M_TFModule.TFData = Ice.createTempClass()
    class TFData(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TFModule::TFData')

        def ice_id(self, current=None):
            return '::TFModule::TFData'

        @staticmethod
        def ice_staticId():
            return '::TFModule::TFData'

        def getTFData(self, current=None):
            raise NotImplementedError("servant method 'getTFData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_TFDataDisp)

        __repr__ = __str__

    _M_TFModule._t_TFDataDisp = IcePy.defineClass('::TFModule::TFData', TFData, (), None, ())
    TFData._ice_type = _M_TFModule._t_TFDataDisp

    TFData._op_getTFData = IcePy.Operation('getTFData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_TFModule._t_TFDataStruct, False, 0), ())

    _M_TFModule.TFData = TFData
    del TFData

_M_TFModule._t_TransformSender = IcePy.defineValue('::TFModule::TransformSender', Ice.Value, -1, (), False, True, None, ())

if 'TransformSenderPrx' not in _M_TFModule.__dict__:
    _M_TFModule.TransformSenderPrx = Ice.createTempClass()
    class TransformSenderPrx(Ice.ObjectPrx):

        def sendTransformData(self, data, context=None):
            return _M_TFModule.TransformSender._op_sendTransformData.invoke(self, ((data, ), context))

        def sendTransformDataAsync(self, data, context=None):
            return _M_TFModule.TransformSender._op_sendTransformData.invokeAsync(self, ((data, ), context))

        def begin_sendTransformData(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_TFModule.TransformSender._op_sendTransformData.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_sendTransformData(self, _r):
            return _M_TFModule.TransformSender._op_sendTransformData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TFModule.TransformSenderPrx.ice_checkedCast(proxy, '::TFModule::TransformSender', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TFModule.TransformSenderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TFModule::TransformSender'
    _M_TFModule._t_TransformSenderPrx = IcePy.defineProxy('::TFModule::TransformSender', TransformSenderPrx)

    _M_TFModule.TransformSenderPrx = TransformSenderPrx
    del TransformSenderPrx

    _M_TFModule.TransformSender = Ice.createTempClass()
    class TransformSender(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TFModule::TransformSender')

        def ice_id(self, current=None):
            return '::TFModule::TransformSender'

        @staticmethod
        def ice_staticId():
            return '::TFModule::TransformSender'

        def sendTransformData(self, data, current=None):
            raise NotImplementedError("servant method 'sendTransformData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_TransformSenderDisp)

        __repr__ = __str__

    _M_TFModule._t_TransformSenderDisp = IcePy.defineClass('::TFModule::TransformSender', TransformSender, (), None, ())
    TransformSender._ice_type = _M_TFModule._t_TransformSenderDisp

    TransformSender._op_sendTransformData = IcePy.Operation('sendTransformData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_TFModule._t_TFDataStruct, False, 0),), (), None, ())

    _M_TFModule.TransformSender = TransformSender
    del TransformSender

_M_TFModule._t_TransformReceiver = IcePy.defineValue('::TFModule::TransformReceiver', Ice.Value, -1, (), False, True, None, ())

if 'TransformReceiverPrx' not in _M_TFModule.__dict__:
    _M_TFModule.TransformReceiverPrx = Ice.createTempClass()
    class TransformReceiverPrx(Ice.ObjectPrx):

        def receiveTransformData(self, data, context=None):
            return _M_TFModule.TransformReceiver._op_receiveTransformData.invoke(self, ((data, ), context))

        def receiveTransformDataAsync(self, data, context=None):
            return _M_TFModule.TransformReceiver._op_receiveTransformData.invokeAsync(self, ((data, ), context))

        def begin_receiveTransformData(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_TFModule.TransformReceiver._op_receiveTransformData.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_receiveTransformData(self, _r):
            return _M_TFModule.TransformReceiver._op_receiveTransformData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TFModule.TransformReceiverPrx.ice_checkedCast(proxy, '::TFModule::TransformReceiver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TFModule.TransformReceiverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TFModule::TransformReceiver'
    _M_TFModule._t_TransformReceiverPrx = IcePy.defineProxy('::TFModule::TransformReceiver', TransformReceiverPrx)

    _M_TFModule.TransformReceiverPrx = TransformReceiverPrx
    del TransformReceiverPrx

    _M_TFModule.TransformReceiver = Ice.createTempClass()
    class TransformReceiver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TFModule::TransformReceiver')

        def ice_id(self, current=None):
            return '::TFModule::TransformReceiver'

        @staticmethod
        def ice_staticId():
            return '::TFModule::TransformReceiver'

        def receiveTransformData(self, data, current=None):
            raise NotImplementedError("servant method 'receiveTransformData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TFModule._t_TransformReceiverDisp)

        __repr__ = __str__

    _M_TFModule._t_TransformReceiverDisp = IcePy.defineClass('::TFModule::TransformReceiver', TransformReceiver, (), None, ())
    TransformReceiver._ice_type = _M_TFModule._t_TransformReceiverDisp

    TransformReceiver._op_receiveTransformData = IcePy.Operation('receiveTransformData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_TFModule._t_TFDataStruct, False, 0),), (), None, ())

    _M_TFModule.TransformReceiver = TransformReceiver
    del TransformReceiver

# End of module TFModule
