# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `PoseModule.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PoseModule
_M_PoseModule = Ice.openModule('PoseModule')
__name__ = 'PoseModule'

_M_PoseModule._t_PoseData = IcePy.defineValue('::PoseModule::PoseData', Ice.Value, -1, (), False, True, None, ())

if 'PoseDataPrx' not in _M_PoseModule.__dict__:
    _M_PoseModule.PoseDataPrx = Ice.createTempClass()
    class PoseDataPrx(Ice.ObjectPrx):

        def publishPoseData(self, data, context=None):
            return _M_PoseModule.PoseData._op_publishPoseData.invoke(self, ((data, ), context))

        def publishPoseDataAsync(self, data, context=None):
            return _M_PoseModule.PoseData._op_publishPoseData.invokeAsync(self, ((data, ), context))

        def begin_publishPoseData(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_PoseModule.PoseData._op_publishPoseData.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_publishPoseData(self, _r):
            return _M_PoseModule.PoseData._op_publishPoseData.end(self, _r)

        def getLatestPoseData(self, context=None):
            return _M_PoseModule.PoseData._op_getLatestPoseData.invoke(self, ((), context))

        def getLatestPoseDataAsync(self, context=None):
            return _M_PoseModule.PoseData._op_getLatestPoseData.invokeAsync(self, ((), context))

        def begin_getLatestPoseData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PoseModule.PoseData._op_getLatestPoseData.begin(self, ((), _response, _ex, _sent, context))

        def end_getLatestPoseData(self, _r):
            return _M_PoseModule.PoseData._op_getLatestPoseData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PoseModule.PoseDataPrx.ice_checkedCast(proxy, '::PoseModule::PoseData', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PoseModule.PoseDataPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PoseModule::PoseData'
    _M_PoseModule._t_PoseDataPrx = IcePy.defineProxy('::PoseModule::PoseData', PoseDataPrx)

    _M_PoseModule.PoseDataPrx = PoseDataPrx
    del PoseDataPrx

    _M_PoseModule.PoseData = Ice.createTempClass()
    class PoseData(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PoseModule::PoseData')

        def ice_id(self, current=None):
            return '::PoseModule::PoseData'

        @staticmethod
        def ice_staticId():
            return '::PoseModule::PoseData'

        def publishPoseData(self, data, current=None):
            raise NotImplementedError("servant method 'publishPoseData' not implemented")

        def getLatestPoseData(self, current=None):
            raise NotImplementedError("servant method 'getLatestPoseData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PoseModule._t_PoseDataDisp)

        __repr__ = __str__

    _M_PoseModule._t_PoseDataDisp = IcePy.defineClass('::PoseModule::PoseData', PoseData, (), None, ())
    PoseData._ice_type = _M_PoseModule._t_PoseDataDisp

    PoseData._op_publishPoseData = IcePy.Operation('publishPoseData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    PoseData._op_getLatestPoseData = IcePy.Operation('getLatestPoseData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_PoseModule.PoseData = PoseData
    del PoseData

# End of module PoseModule
